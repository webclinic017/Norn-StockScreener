{"version":3,"sources":["webpack:///./node_modules/recharts/es6/chart/BarChart.js","webpack:///./src/components/industry-market/industryMarketChart.js","webpack:///./src/components/industry-market/industryTable.js","webpack:///./src/pages/industry-market.js","webpack:///./src/components/industry-market/industryTable.module.scss"],"names":["BarChart","generateCategoricalChart","chartName","GraphicalChild","Bar","defaultTooltipEventType","validateTooltipEventTypes","axisComponents","axisType","AxisComp","XAxis","YAxis","formatAxisMap","IndustryMarketChart","marketData","perfData","info","style","width","window","innerWidth","height","innerHeight","maxWidth","maxHeight","ResponsiveContainer","LineChart","data","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","dataKey","tickFormatter","tickItem","moment","format","domain","Tooltip","Legend","wrapperStyle","Line","type","name","market","stroke","dot","tick","ReferenceLine","y","industry","fill","unit","IndustryTable","loadingAnimeRef","modalWindowRef","useRef","popModalWindow","popPureModal","tableColList","hide","text","useFetch","cachePolicy","get","response","genRowData","src","output","forEach","value","index","baseData","id","length","Industry","Change","FloatShort","Recom","PerfWeek","PerfMonth","PerfQuart","PerfHalf","PerfYear","PerfYTD","Url","MKSymbol","MKSource","MKPerfWeek","Number","MAX_VALUE","MKPerfMonth","MKPerfQuart","MKPerfHalf","MKPerfYear","MKPerfYTD","MKDataUrl","push","mkVal","mkIndex","Object","assign","getIndustryTable","a","resp_data","ok","console","log","setRowData","current","setLoading","useState","rowData","hideColState","setHideColState","useEffect","className","industryTableStyle","container","table","rows","columns","field","headerName","renderCell","params","row","Link","href","target","rel","ColorPercentField","toFixed","fontWeight","color","IconButton","size","aria-haspopup","onClick","symbol","fileName","match","join","reduce","accumulator","currentValue","unshift","Date","Close","parseFloat","parseInt","getMarketData","fontSize","scrollbarSize","pageSize","rowsPerPageOptions","components","NoRowsOverlay","DefaultDataGridTable","disableSelectionOnClick","onColumnVisibilityChange","param","tempHideColState","IndustryPage","getLoading","StylesProvider","injectFirst","module","exports"],"mappings":"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","file":"component---src-pages-industry-market-js-9a62f6863300e8909ee3.js","sourcesContent":["/**\n * @fileOverview Bar Chart\n */\nimport { generateCategoricalChart } from './generateCategoricalChart';\nimport { Bar } from '../cartesian/Bar';\nimport { XAxis } from '../cartesian/XAxis';\nimport { YAxis } from '../cartesian/YAxis';\nimport { formatAxisMap } from '../util/CartesianUtils';\nexport var BarChart = generateCategoricalChart({\n  chartName: 'BarChart',\n  GraphicalChild: Bar,\n  defaultTooltipEventType: 'axis',\n  validateTooltipEventTypes: ['axis', 'item'],\n  axisComponents: [{\n    axisType: 'xAxis',\n    AxisComp: XAxis\n  }, {\n    axisType: 'yAxis',\n    AxisComp: YAxis\n  }],\n  formatAxisMap: formatAxisMap\n});","import React from 'react'\r\nimport {\r\n  LineChart, \r\n  Line, \r\n  XAxis, \r\n  YAxis, \r\n  CartesianGrid, \r\n  Tooltip, \r\n  Legend, \r\n  Bar, \r\n  BarChart, \r\n  ReferenceLine,\r\n  ResponsiveContainer \r\n} from 'recharts'\r\n\r\nimport moment from 'moment'\r\n\r\nconst IndustryMarketChart = ({ marketData, perfData, info}) => {\r\n  return (  \r\n    <div style={{ width: (window.innerWidth - 100) + 'px', height: (window.innerHeight - 100) + 'px', maxWidth: '1200px', maxHeight: '800px' }}>\r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <LineChart\r\n          data={marketData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"Date\" tickFormatter={(tickItem) => {\r\n            return moment(tickItem).format('MM/DD/YYYY')\r\n          }}/>\r\n          <YAxis domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend wrapperStyle={{ bottom: -15 }}/>\r\n          <Line type=\"monotone\" name={`Market (${info.market})`} dataKey=\"Close\" stroke=\"#8884d8\" dot={false}/>\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n      <div style={{height:\"6%\"}}></div>\r\n      <ResponsiveContainer width=\"100%\" height=\"47%\">\r\n        <BarChart\r\n          data={perfData}\r\n          margin={{\r\n            top: 5,\r\n            right: 30,\r\n            left: 20,\r\n            bottom: 5,\r\n          }}\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis tickFormatter={(tick) => {\r\n            return `${tick}%`;\r\n          }} domain={['auto', 'auto']}/>\r\n          <Tooltip />\r\n          <Legend />\r\n          <ReferenceLine y={0} stroke=\"#000\" />\r\n          <Bar name={`Industry (${info.industry})`} dataKey=\"industry\" fill=\"#82ca9d\" unit=\"%\" />\r\n          <Bar name={`Market (${info.market})`} dataKey=\"market\" fill=\"#8884d8\" unit=\"%\" />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default IndustryMarketChart\r\n","import React, { useState, useRef, useEffect } from 'react'\r\nimport { DataGrid } from '@mui/x-data-grid'\r\nimport IconButton from '@mui/material/IconButton'\r\nimport BarChartSharpIcon from '@mui/icons-material/BarChartSharp'\r\nimport Link from '@mui/material/Link'\r\nimport useFetch from 'use-http'\r\n\r\nimport ModalWindow from '../modalWindow'\r\nimport IndustryMarketChart from './industryMarketChart'\r\nimport DefaultDataGridTable from '../defaultDataGridTable'\r\nimport { ColorPercentField } from '../../common/reactUtils'\r\n\r\nimport industryTableStyle from './industryTable.module.scss'\r\nimport '../muiTablePagination.css'\r\n\r\nconst IndustryTable = ({ loadingAnimeRef }) => {\r\n\r\n  const modalWindowRef = useRef({\r\n    popModalWindow: null,\r\n    popPureModal: null,\r\n  })\r\n\r\n  const tableColList = {\r\n    Change: { hide: false, text: 'Change' },\r\n    FloatShort: { hide: true, text: 'Float Short' },\r\n    Recom: { hide: true, text: 'Recom' },\r\n    PerfWeek: { hide: false, text: 'Perf Week' },\r\n    PerfMonth: { hide: false, text: 'Perf Month' },\r\n    PerfQuart: { hide: false, text: 'Perf Quart' },\r\n    PerfHalf: { hide: false, text: 'Perf Half' },\r\n    PerfYear: { hide: false, text: 'Perf Year' },\r\n    PerfYTD: { hide: false, text: 'Perf YTD' },\r\n    MKSymbol: { hide: false, text: 'Symbol' },\r\n    MKSource: { hide: false, text: 'Source' },\r\n    MKPerfWeek: { hide: false, text: 'Perf Week' },\r\n    MKPerfMonth: { hide: false, text: 'Perf Month' },\r\n    MKPerfQuart: { hide: false, text: 'Perf Quart' },\r\n    MKPerfHalf: { hide: false, text: 'Perf Half' },\r\n    MKPerfYear: { hide: false, text: 'Perf Year' },\r\n    MKPerfYTD: { hide: false, text: 'Perf YTD' },\r\n    Chart: { hide: false, text: 'Chart' },\r\n  }\r\n\r\n  const genTableColTemplate = () => {\r\n    return [\r\n      {\r\n        field: 'Industry',\r\n        headerName: 'Industry',\r\n        width: 250,\r\n        renderCell: (params) => (\r\n          params.row['Url'] === '-' ?\r\n            <span>{params.value}</span> :\r\n            <Link href={params.row['Url']} target=\"_blank\" rel=\"noreferrer noopener\">\r\n              <span>{params.value}</span>\r\n            </Link>\r\n        ),\r\n        hide: 'Industry' in hideColState ? hideColState['Industry'] :  false\r\n      },\r\n      ColorPercentField('Change', tableColList.Change.text, 130, 2, 'Change' in hideColState ? hideColState['Change'] : tableColList['Change'].hide, 500),\r\n      {\r\n        field: 'FloatShort',\r\n        headerName: tableColList.FloatShort.text,\r\n        width: 130,\r\n        type: 'number',\r\n        renderCell: (params) => (\r\n          <span>{(params.value * 100).toFixed(2) + \"%\"}</span>\r\n        ),\r\n        hide: 'FloatShort' in  hideColState ? hideColState['FloatShort'] : tableColList['FloatShort'].hide\r\n      },\r\n      {\r\n        field: 'Recom',\r\n        headerName: tableColList.Recom.text,\r\n        width: 130,\r\n        type: 'number',\r\n        renderCell: (params) => (\r\n          <span style={{ fontWeight: 500, color: params.value < 2 ? 'green' : params.value > 3 ? 'red' : '' }}>{params.value}</span>\r\n        ),\r\n        hide: 'Recom' in hideColState ? hideColState['Recom'] : tableColList['Recom'].hide\r\n      },\r\n      ColorPercentField('PerfWeek', tableColList.PerfWeek.text, 145, 2, 'PerfWeek' in hideColState ? hideColState['PerfWeek'] : tableColList['PerfWeek'].hide, 500),\r\n      ColorPercentField('PerfMonth', tableColList.PerfMonth.text, 150, 2, 'PerfMonth' in  hideColState? hideColState['PerfMonth'] : tableColList['PerfMonth'].hide, 500),\r\n      ColorPercentField('PerfQuart', tableColList.PerfQuart.text, 145, 2, 'PerfQuart' in hideColState ? hideColState['PerfQuart'] : tableColList['PerfQuart'].hide, 500),\r\n      ColorPercentField('PerfHalf', tableColList.PerfHalf.text, 140, 2, 'PerfHalf' in hideColState ? hideColState['PerfHalf'] : tableColList['PerfHalf'].hide, 500),\r\n      ColorPercentField('PerfYear', tableColList.PerfYear.text, 140, 2, 'PerfYear' in hideColState ? hideColState['PerfYear'] : tableColList['PerfYear'].hide, 500),\r\n      ColorPercentField('PerfYTD', tableColList.PerfYTD.text, 140, 2, 'PerfYTD' in hideColState ? hideColState['PerfYTD'] : tableColList['PerfYTD'].hide, 500),\r\n      { field: 'MKSymbol', headerName: tableColList.MKSymbol.text, width: 130, hide: 'MKSymbol' in  hideColState ? hideColState['MKSymbol'] : tableColList['MKSymbol'].hide },\r\n      {\r\n        field: 'MKSource',\r\n        headerName: tableColList.MKSource.text,\r\n        width: 130,\r\n        renderCell: (params) => (\r\n          params.row['MKDataUrl'] === '-' ?\r\n            <span>-</span> :\r\n            <Link href={params.row['MKDataUrl']} target=\"_blank\" rel=\"noreferrer noopener\">\r\n              <span>{params.value}</span>\r\n            </Link>\r\n        ),\r\n        hide: 'MKSource' in  hideColState ? hideColState['MKSource'] : tableColList['MKSource'].hide\r\n      },\r\n      ColorPercentField('MKPerfWeek', tableColList.MKPerfWeek.text, 145, 2, 'MKPerfWeek' in  hideColState? hideColState['MKPerfWeek'] : tableColList['MKPerfWeek'].hide, 500),\r\n      ColorPercentField('MKPerfMonth', tableColList.MKPerfMonth.text, 150, 2, 'MKPerfMonth' in  hideColState? hideColState['MKPerfMonth'] : tableColList['MKPerfMonth'].hide, 500),\r\n      ColorPercentField('MKPerfQuart', tableColList.MKPerfQuart.text, 145, 2, 'MKPerfQuart' in hideColState ? hideColState['MKPerfQuart'] : tableColList['MKPerfQuart'].hide, 500),\r\n      ColorPercentField('MKPerfHalf', tableColList.MKPerfHalf.text, 140, 2, 'MKPerfHalf' in hideColState ? hideColState['MKPerfHalf'] : tableColList['MKPerfHalf'].hide, 500),\r\n      ColorPercentField('MKPerfYear', tableColList.MKPerfYear.text, 140, 2, 'MKPerfYear' in  hideColState? hideColState['MKPerfYear'] : tableColList['MKPerfYear'].hide, 500),\r\n      ColorPercentField('MKPerfYTD', tableColList.MKPerfYTD.text, 140, 2, 'MKPerfYTD' in  hideColState ? hideColState['MKPerfYTD'] : tableColList['MKPerfYTD'].hide, 500),\r\n      {\r\n        field: 'Chart',\r\n        headerName: tableColList.Chart.text,\r\n        width: 120,\r\n        renderCell: (params) => (\r\n          params.row['MKDataUrl'] === '-' ?\r\n            <span>-</span> :\r\n          <IconButton\r\n            size=\"small\"\r\n            aria-haspopup=\"true\"\r\n            onClick={() => {\r\n              const getMarketData = async (src, symbol) =>{\r\n                let fileName = (src + '_' + symbol).match(/\\w+/gi).join('_') + '.json'\r\n                const resp_data = await get('/norn-data/markets/' + fileName)\r\n                console.log(resp_data)\r\n                if (response.ok && resp_data.data && resp_data.data.length > 0) {\r\n                  let info = {\r\n                    industry: params.row['Industry'],\r\n                    market: params.row['MKSymbol'],\r\n                  }\r\n\r\n                  let marketData = resp_data.data.reduce((accumulator, currentValue) => {\r\n                    accumulator.unshift({ Date: currentValue.Date, Close: parseFloat(currentValue.Close)})\r\n                    return accumulator\r\n                  }, [])\r\n\r\n                  let perfData = [\r\n                    {\r\n                      name: 'Perf Week',\r\n                      industry: parseInt(params.row['PerfWeek'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfWeek'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Month',\r\n                      industry: parseInt(params.row['PerfMonth'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfMonth'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Quart',\r\n                      industry: parseInt(params.row['PerfQuart'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfQuart'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Half',\r\n                      industry: parseInt(params.row['PerfHalf'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfHalf'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf Year',\r\n                      industry: parseInt(params.row['PerfYear'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfYear'] * 10000, 10) / 100.0,\r\n                    },\r\n                    {\r\n                      name: 'Perf YTD',\r\n                      industry: parseInt(params.row['PerfYTD'] * 10000, 10) / 100.0,\r\n                      market: parseInt(params.row['MKPerfYTD'] * 10000, 10) / 100.0,\r\n                    },\r\n                  ]\r\n\r\n                  modalWindowRef.current.popModalWindow(<IndustryMarketChart marketData={marketData} perfData={perfData} info={info}/>)\r\n                }\r\n                else{\r\n                  modalWindowRef.current.popModalWindow(<div>Load market data failed</div>)\r\n                }\r\n              }\r\n\r\n              getMarketData(params.row['MKSource'], params.row['MKSymbol'])\r\n            }}\r\n          >\r\n            <BarChartSharpIcon color=\"primary\" style={{ fontSize: 40 }} />\r\n          </IconButton>\r\n        ),\r\n        hide: 'Chart' in  hideColState? hideColState['Chart'] : tableColList['Chart'].hide\r\n      },\r\n    ]\r\n  }\r\n\r\n  const { get, response } = useFetch({ cachePolicy: 'no-cache' })\r\n  const genRowData = (src) => {\r\n    let output = []\r\n    src.forEach((value, index) => {\r\n      let baseData = {\r\n        id: output.length,\r\n        Industry: value['Industry'],\r\n        Change: value['Change'],\r\n        FloatShort: value['Float Short'],\r\n        Recom: value['Recom'],\r\n        PerfWeek: value['Perf Week'],\r\n        PerfMonth: value['Perf Month'],\r\n        PerfQuart: value['Perf Quart'],\r\n        PerfHalf: value['Perf Half'],\r\n        PerfYear: value['Perf Year'],\r\n        PerfYTD: value['Perf YTD'],\r\n        Url: value['Url'],\r\n        MKSymbol: '-',\r\n        MKSource: '-',\r\n        MKPerfWeek: -Number.MAX_VALUE,\r\n        MKPerfMonth: -Number.MAX_VALUE,\r\n        MKPerfQuart: -Number.MAX_VALUE,\r\n        MKPerfHalf: -Number.MAX_VALUE,\r\n        MKPerfYear: -Number.MAX_VALUE,\r\n        MKPerfYTD: -Number.MAX_VALUE,\r\n        MKDataUrl: '-',\r\n      }\r\n\r\n      if (value['Market'].length === 0) {\r\n        output.push(baseData)\r\n      }\r\n      else {\r\n        value['Market'].forEach((mkVal, mkIndex) => {\r\n          let data = Object.assign({}, baseData)\r\n          data.id = output.length\r\n          data.MKSymbol = mkVal['symbol']\r\n          data.MKSource = mkVal['src']\r\n          data.MKPerfWeek = mkVal['Perf Week']\r\n          data.MKPerfMonth = mkVal['Perf Month']\r\n          data.MKPerfQuart = mkVal['Perf Quart']\r\n          data.MKPerfHalf = mkVal['Perf Half']\r\n          data.MKPerfYear = mkVal['Perf Year']\r\n          data.MKPerfYTD = mkVal['Perf YTD']\r\n          data.MKDataUrl = mkVal['dataUrl']\r\n          output.push(data)\r\n        })\r\n      }\r\n    })\r\n    return output\r\n  }\r\n\r\n  const getIndustryTable = async () =>{\r\n    const resp_data = await get('/norn-data/indusrty-table.json')\r\n    if (response.ok) {\r\n      console.log(resp_data)\r\n      let output = genRowData(resp_data['data'])\r\n      setRowData(output)\r\n    }\r\n    else{\r\n      modalWindowRef.current.popModalWindow(<div>Load indusrty-table.json failed</div>)\r\n      setRowData([])\r\n    }\r\n    loadingAnimeRef.current.setLoading(false)\r\n  }\r\n  const [rowData, setRowData] = useState([])\r\n  const [hideColState, setHideColState] = useState({})\r\n\r\n  useEffect(() => {\r\n    // componentDidMount is here!\r\n    // componentDidUpdate is here!\r\n    getIndustryTable()\r\n    return () => {\r\n      // componentWillUnmount is here!\r\n    }\r\n  }, [])\r\n\r\n  return (\r\n    <>\r\n      <div className={industryTableStyle.container}>\r\n        <div className={industryTableStyle.table}>\r\n          <DataGrid rows={rowData} columns={genTableColTemplate()} scrollbarSize={17} pageSize={50} rowsPerPageOptions={[]} components={{ NoRowsOverlay: DefaultDataGridTable, }} disableSelectionOnClick onColumnVisibilityChange={(param) => {\r\n            let tempHideColState = hideColState\r\n            tempHideColState[param['field']] = !param['isVisible']\r\n            setHideColState(tempHideColState)\r\n          }}/>\r\n        </div>\r\n      </div>\r\n      <ModalWindow modalWindowRef={modalWindowRef} />\r\n    </>\r\n  )\r\n}\r\n\r\nexport default IndustryTable\r\n","import React, { useRef } from 'react'\r\nimport { StylesProvider } from '@mui/styles'\r\n\r\nimport Layout from '../components/layout'\r\nimport IndustryTable from '../components/industry-market/industryTable'\r\nimport LoadingAnime from '../components/loadingAnime'\r\nimport SEO from '../components/seo'\r\n\r\nconst IndustryPage = () => {\r\n\r\n  const loadingAnimeRef = useRef({\r\n    getLoading: null,\r\n    setLoading: null\r\n  })\r\n\r\n  return (\r\n    <StylesProvider injectFirst>\r\n      <SEO />\r\n      <Layout >\r\n        <IndustryTable loadingAnimeRef={loadingAnimeRef}/>\r\n      </Layout>\r\n      <LoadingAnime loadingAnimeRef={loadingAnimeRef} />\r\n    </StylesProvider>\r\n  )\r\n}\r\n\r\nexport default IndustryPage\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"industryTable-module--container--2zRSU\",\"table\":\"industryTable-module--table--2GQAU\"};"],"sourceRoot":""}